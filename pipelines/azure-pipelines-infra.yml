trigger: none
pr: none

parameters:
  - name: environment
    displayName: "Environment Selection"
    type: string
    default: dev
    values:
      - dev
      - prod

variables:
  - template: vars-${{ parameters.environment }}.yml

stages:
- stage: Build
  jobs:
  - job: Linting
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: PowerShell@2
      displayName: 'PRRule Linting'
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          set -eou pipefail
          trap exit 1 ERR
          python -m pip install pre-commit
          pre-commit install
          pre-commit run arm-bicep-psrule-linting
        workingDirectory: 'application'
    - task: Bash@3
      displayName: 'Pre-Commit Linting'
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          set -eou pipefail
          trap exit 1 ERR
          python -m pip install pre-commit
          pre-commit install
          SKIP=isort,yapf,black,flake8,bandit,arm-bicep-psrule-linting pre-commit run --all-files
        workingDirectory: 'application'
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: CopyFiles@2
      displayName: 'Copy files'
      inputs:
        contents: '**'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - publish: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Publish script'
      artifact: ${{ variables.artifactName }}
- stage: DeployInfra
  dependsOn: Build
  jobs:     
  - deployment: Infra
    workspace:
      clean: all
    environment: ${{ variables.environment }}
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: ${{ variables.artifactName }}
          - task: AzureCLI@2
            displayName: Create Resource Group
            inputs:
              azureSubscription: ${{ variables.serviceConnection }}
              failOnStandardError: true
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                if [[ $(az group exists -g ${{ variables.resourceGroup }}) == false ]]; then
                  echo "Creating Resource Group"
                  az group create --name ${{ variables.resourceGroup }} --location uksouth
                fi
              workingDirectory: '$(Pipeline.Workspace)'
          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              connectedServiceName: ${{ variables.serviceConnection }}
              location: ${{ variables.location }}
              deploymentMode: Validation
              resourceGroupName: ${{ variables.resourceGroup }}
              csmFile: $(Pipeline.Workspace)/${{ variables.artifactName }}/infrastructure/${{ variables.templateFile }}
              overrideParameters: >- 
                -storageAccountName ${{ variables.storageAccountName }} 
                -storageAccountSku ${{ variables.storageAccountSku }} 
                -storageAccountTier ${{ variables.storageAccountTier }}
                -webAppServerName ${{ variables.webAppServerName }} 
                -webAppServerKind ${{ variables.webAppServerKind }} 
                -webAppServerSku ${{ variables.webAppServerSku }} 
                -webAppName ${{ variables.webAppName }} 
                -webAppLinuxFxVersion ${{ variables.webAppLinuxFxVersion }}
          - task: AzureCLI@2
            displayName: What-if
            inputs:
              azureSubscription: ${{ variables.serviceConnection }}
              failOnStandardError: true
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Running What If"
                az deployment group what-if --resource-group ${{ variables.resourceGroup }} --template-file ${{ variables.templateFile }} \
                  --parameters storageAccountName=${{ variables.storageAccountName }} storageAccountSku=${{ variables.storageAccountSku }} storageAccountTier=${{ variables.storageAccountTier }} \
                    webAppServerName=${{ variables.webAppServerName }} webAppServerKind=${{ variables.webAppServerKind }} webAppServerSku=${{ variables.webAppServerSku }} \
                    webAppName=${{ variables.webAppName }} webAppLinuxFxVersion=${{ variables.webAppLinuxFxVersion }}
              workingDirectory: '$(Pipeline.Workspace)/${{ variables.artifactName }}/infrastructure'
          - task: AzureCLI@2
            displayName: Cost Estimator
            inputs:
              azureSubscription: ${{ variables.serviceConnection }}
              failOnStandardError: true
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Cost Estimator - wget"
                wget -q https://github.com/TheCloudTheory/arm-estimator/releases/download/1.1/arm-estimator-linux-x64-1.1.zip
                echo "Cost Estimator - unzip"
                unzip arm-estimator-linux-x64-1.1.zip
                echo "Cost Estimator - run"
                chmod +x ./azure-cost-estimator
                ./azure-cost-estimator ${{ variables.templateFile }} ${{ variables.subscriptionId }} ${{ variables.resourceGroup }} --currency GBP \
                  --inline storageAccountName=${{ variables.storageAccountName }} --inline storageAccountSku=${{ variables.storageAccountSku }} --inline storageAccountTier=${{ variables.storageAccountTier }} \
                  --inline webAppServerName=${{ variables.webAppServerName }} --inline webAppServerKind=${{ variables.webAppServerKind }} --inline webAppServerSku=${{ variables.webAppServerSku }} \
                  --inline webAppName=${{ variables.webAppName }} --inline webAppLinuxFxVersion=${{ variables.webAppLinuxFxVersion }}
              workingDirectory: '$(Pipeline.Workspace)/${{ variables.artifactName }}/infrastructure'
          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              connectedServiceName: ${{ variables.serviceConnection }}
              location: ${{ variables.location }}
              deploymentMode: Incremental
              resourceGroupName: ${{ variables.resourceGroup }}
              csmFile: $(Pipeline.Workspace)/${{ variables.artifactName }}/infrastructure/${{ variables.templateFile }}
              overrideParameters: >-
                -storageAccountName ${{ variables.storageAccountName }} 
                -storageAccountSku ${{ variables.storageAccountSku }} 
                -storageAccountTier ${{ variables.storageAccountTier }}
                -webAppServerName ${{ variables.webAppServerName }} 
                -webAppServerKind ${{ variables.webAppServerKind }} 
                -webAppServerSku ${{ variables.webAppServerSku }} 
                -webAppName ${{ variables.webAppName }} 
                -webAppLinuxFxVersion ${{ variables.webAppLinuxFxVersion }}
          - task: AzureCLI@2
            displayName: WebApp Identity Storage Account Permissions
            inputs:
              azureSubscription: ${{ variables.serviceConnection }}
              failOnStandardError: true
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                # Downgrade CLI to 2.44.1 due to breaking change to az webapp
                sudo apt-get update
                sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
                sudo mkdir -p /etc/apt/keyrings
                curl -sLS https://packages.microsoft.com/keys/microsoft.asc |
                    gpg --dearmor |
                    sudo tee /etc/apt/keyrings/microsoft.gpg > /dev/null
                sudo chmod go+r /etc/apt/keyrings/microsoft.gpg
                AZ_REPO=$(lsb_release -cs)
                echo "deb [arch=`dpkg --print-architecture` signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" |
                    sudo tee /etc/apt/sources.list.d/azure-cli.list
                sudo apt-get update
                sudo apt-get install azure-cli=2.44.1-1~bullseye

                echo "Setting WebApp Identity Storage Account Permissions"
                storageId=$(az storage account show -n ${{ variables.storageAccountName }} -g ${{ variables.resourceGroup }} --query id -otsv)
                # Bicep seems to ignores the identity parameter, so using the cli
                az webapp identity assign -g ${{ variables.resourceGroup }} -n ${{ variables.webAppName }} --identities [system] --role 'Contributor' --scope $storageId
              workingDirectory: '$(Pipeline.Workspace)'
